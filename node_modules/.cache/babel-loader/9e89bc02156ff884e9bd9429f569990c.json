{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\tictactoe\\\\game\\\\src\\\\components\\\\gaming.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport CalculateWinner from \"./CalculateWinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Gaming extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  }\n\n  render() {\n    const winner = CalculateWinner(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default Gaming;","map":{"version":3,"sources":["C:/React/tictactoe/game/src/components/gaming.js"],"names":["React","Board","CalculateWinner","Gaming","Component","constructor","props","state","history","squares","Array","fill","xIsNext","render","winner","status"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AACA,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,CAAC;AAAEC,QAAAA,OAAO,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd;AAAX,OAAD,CADE;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb;AAKD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAMC,MAAM,GAAGZ,eAAe,CAAC,KAAKK,KAAL,CAAWE,OAAZ,CAA9B;AACA,QAAIM,MAAJ;;AACA,QAAID,MAAJ,EAAY;AACVC,MAAAA,MAAM,GAAG,aAAaD,MAAtB;AACD,KAFD,MAEO;AACLC,MAAAA,MAAM,GAAG,mBAAmB,KAAKR,KAAL,CAAWK,OAAX,GAAqB,GAArB,GAA2B,GAA9C,CAAT;AACD;;AACD,wBAAO,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAlBkC;;AAqBrC,eAAeT,MAAf","sourcesContent":["import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport CalculateWinner from \"./CalculateWinner\";\r\nclass Gaming extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{ squares: Array(9).fill(null) }],\r\n\r\n      xIsNext: true,\r\n    };\r\n  }\r\n  render() {\r\n    const winner = CalculateWinner(this.state.squares);\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n    return <Board />;\r\n  }\r\n}\r\n\r\nexport default Gaming;\r\n"]},"metadata":{},"sourceType":"module"}